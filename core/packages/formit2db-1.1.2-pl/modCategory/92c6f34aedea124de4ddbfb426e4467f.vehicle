<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      '278b66fd4688388446c18f04108f440e' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"FormIt2db","description":"FormIt to DB hook.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt2db\\/db2FormIt\\n *\\n * Copyright 2013-2014 by Thomas Jakobi <thomas.jakobi@partout.info>\\n *\\n * The snippets bases on the code in the following thread in MODX forum\\n * http:\\/\\/forums.modx.com\\/thread\\/?thread=32560\\n *\\n * FormIt2db\\/db2FormIt is free software; you can redistribute it and\\/or modify\\n * it under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt2db\\/db2FormIt is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt2db\\/db2FormIt; if not, write to the Free Software Foundation, Inc.,\\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit2db\\n * @subpackage formit2db snippet\\n *\\/\\n$prefix = $modx->getOption(\'prefix\', $scriptProperties, $modx->getOption(xPDO::OPT_TABLE_PREFIX), true);\\n$packagename = $modx->getOption(\'packagename\', $scriptProperties, \'\', true);\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\', true);\\n$tablename = $modx->getOption(\'tablename\', $scriptProperties, \'\', true);\\n$where = $modx->fromJson($modx->getOption(\'where\', $scriptProperties, \'\', true));\\n$paramname = $modx->getOption(\'paramname\', $scriptProperties, \'\', true);\\n$fieldname = $modx->getOption(\'fieldname\', $scriptProperties, $paramname, true);\\n$arrayFormat = $modx->getOption(\'arrayFormat\', $scriptProperties, \'csv\', true);\\n$arrayFields = $modx->fromJson($modx->getOption(\'arrayFields\', $scriptProperties, \'[]\', true));\\n$removeFields = $modx->fromJson($modx->getOption(\'removeFields\', $scriptProperties, \'[]\', true));\\n$autoPackage = (boolean)$modx->getOption(\'autoPackage\', $scriptProperties, false);\\n\\n$packagepath = $modx->getOption($packagename . \'.core_path\', NULL, $modx->getOption(\'core_path\') . \'components\\/\' . $packagename . \'\\/\');\\n$modelpath = $packagepath . \'model\\/\';\\n\\nif ($autoPackage) {\\n    $schemapath = $modelpath . \'schema\\/\';\\n    $schemafile = $schemapath . $packagename . \'.mysql.schema.xml\';\\n    $manager = $modx->getManager();\\n    $generator = $manager->getGenerator();\\n    if (!file_exists($schemafile)) {\\n\\n        if (!is_dir($packagepath)) {\\n            mkdir($packagepath, 0777);\\n        }\\n        if (!is_dir($modelpath)) {\\n            mkdir($modelpath, 0777);\\n        }\\n        if (!is_dir($schemapath)) {\\n            mkdir($schemapath, 0777);\\n        }\\n        \\/\\/Use this to create a schema from an existing database\\n        if (!$generator->writeSchema($schemafile, $packagename, \'\', $prefix, true)) {\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Could not generate XML schema\', \'\', \'FormIt2db Hook\');\\n        }\\n    }\\n    $generator->parseSchema($schemafile, $modelpath);\\n    $modx->log(modX::LOG_LEVEL_WARN, \'autoPackage parameter active\', \'\', \'FormIt2db Hook\');\\n    $modx->addPackage($packagename, $modelpath, $prefix);\\n    $classname = $generator->getClassName($tablename);\\n} else {\\n    $modx->addPackage($packagename, $modelpath, $prefix);\\n}\\n\\nif ($fieldname) {\\n    if (is_array($where)) {\\n        $where[$fieldname] = $modx->request->getParameters(array($paramname), \'POST\');\\n    } else {\\n        $where = array($fieldname => $modx->request->getParameters(array($paramname), \'POST\'));\\n    }\\n}\\n\\nif (is_array($where)) {\\n    $dataobject = $modx->getObject($classname, $where);\\n    if (empty($dataobject)) {\\n        $dataobject = $modx->newObject($classname);\\n    }\\n} else {\\n    $dataobject = $modx->newObject($classname);\\n}\\n\\nif (!is_object($dataobject) || !($dataobject instanceof xPDOObject)) {\\n    $errorMsg = \'Failed to create object of type: \' . $classname;\\n    $hook->addError(\'error_message\', $errorMsg);\\n    $modx->log(modX::LOG_LEVEL_ERROR, $errorMsg, \'\', \'FormIt2db Hook\');\\n    return false;\\n}\\n\\n$formFields = $hook->getValues();\\nforeach ($formFields as $field => $value) {\\n    if (!in_array($field, $removeFields)) {\\n        if (in_array($field, $arrayFields)) {\\n            switch ($arrayFormat) {\\n                case \'json\':\\n                    $value = json_encode($value);\\n                    break;\\n                case \'csv\' :\\n                default :\\n                    $value = implode(\',\', $value);\\n                    break;\\n            }\\n        }\\n        $dataobject->set($field, $value);\\n    }\\n}\\n\\nif (!$dataobject->save()) {\\n    $errorMsg = \'Failed to save object of type: \' . $classname;\\n    $hook->addError(\'error_message\', $errorMsg);\\n    $modx->log(modX::LOG_LEVEL_ERROR, $errorMsg, \'\', \'FormIt2db Hook\');\\n    return false;\\n}\\nreturn true;","locked":0,"properties":"a:11:{s:6:\\"prefix\\";a:7:{s:4:\\"name\\";s:6:\\"prefix\\";s:4:\\"desc\\";s:21:\\"prop_formit2db.prefix\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"packagename\\";a:7:{s:4:\\"name\\";s:11:\\"packagename\\";s:4:\\"desc\\";s:26:\\"prop_formit2db.packagename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"classname\\";a:7:{s:4:\\"name\\";s:9:\\"classname\\";s:4:\\"desc\\";s:24:\\"prop_formit2db.classname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"tablename\\";a:7:{s:4:\\"name\\";s:9:\\"tablename\\";s:4:\\"desc\\";s:24:\\"prop_db2formit.tablename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"where\\";a:7:{s:4:\\"name\\";s:5:\\"where\\";s:4:\\"desc\\";s:20:\\"prop_formit2db.where\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"paramname\\";a:7:{s:4:\\"name\\";s:9:\\"paramname\\";s:4:\\"desc\\";s:24:\\"prop_formit2db.paramname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"fieldname\\";a:7:{s:4:\\"name\\";s:9:\\"fieldname\\";s:4:\\"desc\\";s:24:\\"prop_formit2db.fieldname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"arrayFormat\\";a:7:{s:4:\\"name\\";s:11:\\"arrayFormat\\";s:4:\\"desc\\";s:26:\\"prop_db2formit.arrayFormat\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"CSV\\";s:5:\\"value\\";s:3:\\"csv\\";}i:1;a:2:{s:4:\\"text\\";s:4:\\"JSON\\";s:5:\\"value\\";s:4:\\"json\\";}}s:5:\\"value\\";s:3:\\"csv\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"arrayFields\\";a:7:{s:4:\\"name\\";s:11:\\"arrayFields\\";s:4:\\"desc\\";s:26:\\"prop_db2formit.arrayFields\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"[]\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"removeFields\\";a:7:{s:4:\\"name\\";s:12:\\"removeFields\\";s:4:\\"desc\\";s:27:\\"prop_formit2db.removeFields\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"[]\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"autoPackage\\";a:7:{s:4:\\"name\\";s:11:\\"autoPackage\\";s:4:\\"desc\\";s:26:\\"prop_formit2db.autoPackage\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt2db\\/db2FormIt\\n *\\n * Copyright 2013-2014 by Thomas Jakobi <thomas.jakobi@partout.info>\\n *\\n * The snippets bases on the code in the following thread in MODX forum\\n * http:\\/\\/forums.modx.com\\/thread\\/?thread=32560\\n *\\n * FormIt2db\\/db2FormIt is free software; you can redistribute it and\\/or modify\\n * it under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt2db\\/db2FormIt is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt2db\\/db2FormIt; if not, write to the Free Software Foundation, Inc.,\\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit2db\\n * @subpackage formit2db snippet\\n *\\/\\n$prefix = $modx->getOption(\'prefix\', $scriptProperties, $modx->getOption(xPDO::OPT_TABLE_PREFIX), true);\\n$packagename = $modx->getOption(\'packagename\', $scriptProperties, \'\', true);\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\', true);\\n$tablename = $modx->getOption(\'tablename\', $scriptProperties, \'\', true);\\n$where = $modx->fromJson($modx->getOption(\'where\', $scriptProperties, \'\', true));\\n$paramname = $modx->getOption(\'paramname\', $scriptProperties, \'\', true);\\n$fieldname = $modx->getOption(\'fieldname\', $scriptProperties, $paramname, true);\\n$arrayFormat = $modx->getOption(\'arrayFormat\', $scriptProperties, \'csv\', true);\\n$arrayFields = $modx->fromJson($modx->getOption(\'arrayFields\', $scriptProperties, \'[]\', true));\\n$removeFields = $modx->fromJson($modx->getOption(\'removeFields\', $scriptProperties, \'[]\', true));\\n$autoPackage = (boolean)$modx->getOption(\'autoPackage\', $scriptProperties, false);\\n\\n$packagepath = $modx->getOption($packagename . \'.core_path\', NULL, $modx->getOption(\'core_path\') . \'components\\/\' . $packagename . \'\\/\');\\n$modelpath = $packagepath . \'model\\/\';\\n\\nif ($autoPackage) {\\n    $schemapath = $modelpath . \'schema\\/\';\\n    $schemafile = $schemapath . $packagename . \'.mysql.schema.xml\';\\n    $manager = $modx->getManager();\\n    $generator = $manager->getGenerator();\\n    if (!file_exists($schemafile)) {\\n\\n        if (!is_dir($packagepath)) {\\n            mkdir($packagepath, 0777);\\n        }\\n        if (!is_dir($modelpath)) {\\n            mkdir($modelpath, 0777);\\n        }\\n        if (!is_dir($schemapath)) {\\n            mkdir($schemapath, 0777);\\n        }\\n        \\/\\/Use this to create a schema from an existing database\\n        if (!$generator->writeSchema($schemafile, $packagename, \'\', $prefix, true)) {\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Could not generate XML schema\', \'\', \'FormIt2db Hook\');\\n        }\\n    }\\n    $generator->parseSchema($schemafile, $modelpath);\\n    $modx->log(modX::LOG_LEVEL_WARN, \'autoPackage parameter active\', \'\', \'FormIt2db Hook\');\\n    $modx->addPackage($packagename, $modelpath, $prefix);\\n    $classname = $generator->getClassName($tablename);\\n} else {\\n    $modx->addPackage($packagename, $modelpath, $prefix);\\n}\\n\\nif ($fieldname) {\\n    if (is_array($where)) {\\n        $where[$fieldname] = $modx->request->getParameters(array($paramname), \'POST\');\\n    } else {\\n        $where = array($fieldname => $modx->request->getParameters(array($paramname), \'POST\'));\\n    }\\n}\\n\\nif (is_array($where)) {\\n    $dataobject = $modx->getObject($classname, $where);\\n    if (empty($dataobject)) {\\n        $dataobject = $modx->newObject($classname);\\n    }\\n} else {\\n    $dataobject = $modx->newObject($classname);\\n}\\n\\nif (!is_object($dataobject) || !($dataobject instanceof xPDOObject)) {\\n    $errorMsg = \'Failed to create object of type: \' . $classname;\\n    $hook->addError(\'error_message\', $errorMsg);\\n    $modx->log(modX::LOG_LEVEL_ERROR, $errorMsg, \'\', \'FormIt2db Hook\');\\n    return false;\\n}\\n\\n$formFields = $hook->getValues();\\nforeach ($formFields as $field => $value) {\\n    if (!in_array($field, $removeFields)) {\\n        if (in_array($field, $arrayFields)) {\\n            switch ($arrayFormat) {\\n                case \'json\':\\n                    $value = json_encode($value);\\n                    break;\\n                case \'csv\' :\\n                default :\\n                    $value = implode(\',\', $value);\\n                    break;\\n            }\\n        }\\n        $dataobject->set($field, $value);\\n    }\\n}\\n\\nif (!$dataobject->save()) {\\n    $errorMsg = \'Failed to save object of type: \' . $classname;\\n    $hook->addError(\'error_message\', $errorMsg);\\n    $modx->log(modX::LOG_LEVEL_ERROR, $errorMsg, \'\', \'FormIt2db Hook\');\\n    return false;\\n}\\nreturn true;"}',
        'guid' => 'e1e3fd62195a84cabb8fb7960eeec6f1',
        'native_key' => 1,
        'signature' => '47a7d829cda8495345a46ea153c161af',
      ),
      '6b76c7b86ae0bcef11465a48af91dae5' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"db2FormIt","description":"DB to FormIt hook.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt2db\\/db2FormIt\\n *\\n * Copyright 2013-2014 by Thomas Jakobi <thomas.jakobi@partout.info>\\n *\\n * The snippets bases on the code in the following thread in MODX forum\\n * http:\\/\\/forums.modx.com\\/thread\\/?thread=32560\\n *\\n * FormIt2db\\/db2FormIt is free software; you can redistribute it and\\/or modify\\n * it under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt2db\\/db2FormIt is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt2db\\/db2FormIt; if not, write to the Free Software Foundation, Inc.,\\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit2db\\n * @subpackage db2formit snippet\\n *\\/\\n$prefix = $modx->getOption(\'prefix\', $scriptProperties, $modx->getOption(xPDO::OPT_TABLE_PREFIX), true);\\n$packagename = $modx->getOption(\'packagename\', $scriptProperties, \'\', true);\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\', true);\\n$tablename = $modx->getOption(\'tablename\', $scriptProperties, \'\', true);\\n$where = $modx->fromJson($modx->getOption(\'where\', $scriptProperties, \'\', true));\\n$paramname = $modx->getOption(\'paramname\', $scriptProperties, \'\', true);\\n$fieldname = $modx->getOption(\'fieldname\', $scriptProperties, $paramname, true);\\n$arrayFormat = $modx->getOption(\'arrayFormat\', $scriptProperties, \'csv\', true);\\n$arrayFields = $modx->fromJson($modx->getOption(\'arrayFields\', $scriptProperties, \'[]\', true));\\n$ignoreFields = $modx->fromJson($modx->getOption(\'ignoreFields\', $scriptProperties, \'[]\', true));\\n$notFoundRedirect = (integer)$modx->getOption(\'notFoundRedirect\', $scriptProperties, \'0\', true);\\n$autoPackage = (boolean)$modx->getOption(\'autoPackage\', $scriptProperties, false);\\n\\n$packagepath = $modx->getOption($packagename . \'.core_path\', NULL, $modx->getOption(\'core_path\') . \'components\\/\' . $packagename . \'\\/\');\\n$modelpath = $packagepath . \'model\\/\';\\n\\nif ($autoPackage) {\\n    $schemapath = $modelpath . \'schema\\/\';\\n    $schemafile = $schemapath . $packagename . \'.mysql.schema.xml\';\\n    $manager = $modx->getManager();\\n    $generator = $manager->getGenerator();\\n    if (!file_exists($schemafile)) {\\n\\n        if (!is_dir($packagepath)) {\\n            mkdir($packagepath, 0777);\\n        }\\n        if (!is_dir($modelpath)) {\\n            mkdir($modelpath, 0777);\\n        }\\n        if (!is_dir($schemapath)) {\\n            mkdir($schemapath, 0777);\\n        }\\n        \\/\\/Use this to create a schema from an existing database\\n        if (!$generator->writeSchema($schemafile, $packagename, \'xPDOObject\', $prefix, true)) {\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Could not generate XML schema\', \'\', \'db2FormIt Hook\');\\n        }\\n    }\\n    $generator->parseSchema($schemafile, $modelpath);\\n    $modx->log(modX::LOG_LEVEL_WARN, \'autoPackage parameter active\', \'\', \'db2FormIt Hook\');\\n    $modx->addPackage($packagename, $modelpath, $prefix);\\n    $classname = $generator->getClassName($tablename);\\n} else {\\n    $modx->addPackage($packagename, $modelpath, $prefix);\\n}\\n\\nif ($fieldname) {\\n    if (is_array($where)) {\\n        $where[$fieldname] = $modx->request->getParameters(array($paramname), \'REQUEST\');\\n    } else {\\n        $where = array($fieldname => $modx->request->getParameters(array($paramname), \'REQUEST\'));\\n    }\\n}\\n\\nif (is_array($where)) {\\n    if ($dataobject = $modx->getObject($classname, $where)) {\\n        if (!is_object($dataobject) || !($dataobject instanceof xPDOObject)) {\\n            $errorMsg = \'Failed to create object of type: \' . $classname;\\n            $hook->addError(\'error_message\', $errorMsg);\\n            $modx->log(modX::LOG_LEVEL_ERROR, $errorMsg, \'\', \'db2FormIt Hook\');\\n            return false;\\n        }\\n        if (empty($dataobject) && $notFoundRedirect) {\\n            $modx->sendRedirect($modx->makeUrl($notFoundRedirect));\\n        }\\n        $formFields = $dataobject->toArray();\\n        foreach ($formFields as $field => $value) {\\n            if (in_array($field, $ignoreFields)) {\\n                unset($formFields[$field]);\\n            }\\n            if (in_array($field, $arrayFields)) {\\n                switch ($arrayFormat) {\\n                    case \'json\': {\\n                        $formFields[$field] = json_decode($value, true);\\n                        break;\\n                    }\\n                    case \'csv\' :\\n                    default : {\\n                    $formFields[$field] = explode(\',\', $value);\\n                    break;\\n                    }\\n                }\\n            }\\n        }\\n        $hook->setValues($formFields);\\n    }\\n} else {\\n    if ($notFoundRedirect) {\\n        $modx->sendRedirect($modx->makeUrl($notFoundRedirect));\\n    }\\n}\\n\\nreturn true;","locked":0,"properties":"a:12:{s:6:\\"prefix\\";a:7:{s:4:\\"name\\";s:6:\\"prefix\\";s:4:\\"desc\\";s:21:\\"prop_db2formit.prefix\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"packagename\\";a:7:{s:4:\\"name\\";s:11:\\"packagename\\";s:4:\\"desc\\";s:26:\\"prop_db2formit.packagename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"classname\\";a:7:{s:4:\\"name\\";s:9:\\"classname\\";s:4:\\"desc\\";s:24:\\"prop_db2formit.classname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"tablename\\";a:7:{s:4:\\"name\\";s:9:\\"tablename\\";s:4:\\"desc\\";s:24:\\"prop_db2formit.tablename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"where\\";a:7:{s:4:\\"name\\";s:5:\\"where\\";s:4:\\"desc\\";s:20:\\"prop_db2formit.where\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"paramname\\";a:7:{s:4:\\"name\\";s:9:\\"paramname\\";s:4:\\"desc\\";s:24:\\"prop_db2formit.paramname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"fieldname\\";a:7:{s:4:\\"name\\";s:9:\\"fieldname\\";s:4:\\"desc\\";s:24:\\"prop_db2formit.fieldname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"arrayFormat\\";a:7:{s:4:\\"name\\";s:11:\\"arrayFormat\\";s:4:\\"desc\\";s:26:\\"prop_db2formit.arrayFormat\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"CSV\\";s:5:\\"value\\";s:3:\\"csv\\";}i:1;a:2:{s:4:\\"text\\";s:4:\\"JSON\\";s:5:\\"value\\";s:4:\\"json\\";}}s:5:\\"value\\";s:3:\\"csv\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"arrayFields\\";a:7:{s:4:\\"name\\";s:11:\\"arrayFields\\";s:4:\\"desc\\";s:26:\\"prop_db2formit.arrayFields\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"[]\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"ignoreFields\\";a:7:{s:4:\\"name\\";s:12:\\"ignoreFields\\";s:4:\\"desc\\";s:27:\\"prop_db2formit.ignoreFields\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"[]\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"notFoundRedirect\\";a:7:{s:4:\\"name\\";s:16:\\"notFoundRedirect\\";s:4:\\"desc\\";s:31:\\"prop_db2formit.notFoundRedirect\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"autoPackage\\";a:7:{s:4:\\"name\\";s:11:\\"autoPackage\\";s:4:\\"desc\\";s:26:\\"prop_formit2db.autoPackage\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt2db\\/db2FormIt\\n *\\n * Copyright 2013-2014 by Thomas Jakobi <thomas.jakobi@partout.info>\\n *\\n * The snippets bases on the code in the following thread in MODX forum\\n * http:\\/\\/forums.modx.com\\/thread\\/?thread=32560\\n *\\n * FormIt2db\\/db2FormIt is free software; you can redistribute it and\\/or modify\\n * it under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt2db\\/db2FormIt is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt2db\\/db2FormIt; if not, write to the Free Software Foundation, Inc.,\\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit2db\\n * @subpackage db2formit snippet\\n *\\/\\n$prefix = $modx->getOption(\'prefix\', $scriptProperties, $modx->getOption(xPDO::OPT_TABLE_PREFIX), true);\\n$packagename = $modx->getOption(\'packagename\', $scriptProperties, \'\', true);\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\', true);\\n$tablename = $modx->getOption(\'tablename\', $scriptProperties, \'\', true);\\n$where = $modx->fromJson($modx->getOption(\'where\', $scriptProperties, \'\', true));\\n$paramname = $modx->getOption(\'paramname\', $scriptProperties, \'\', true);\\n$fieldname = $modx->getOption(\'fieldname\', $scriptProperties, $paramname, true);\\n$arrayFormat = $modx->getOption(\'arrayFormat\', $scriptProperties, \'csv\', true);\\n$arrayFields = $modx->fromJson($modx->getOption(\'arrayFields\', $scriptProperties, \'[]\', true));\\n$ignoreFields = $modx->fromJson($modx->getOption(\'ignoreFields\', $scriptProperties, \'[]\', true));\\n$notFoundRedirect = (integer)$modx->getOption(\'notFoundRedirect\', $scriptProperties, \'0\', true);\\n$autoPackage = (boolean)$modx->getOption(\'autoPackage\', $scriptProperties, false);\\n\\n$packagepath = $modx->getOption($packagename . \'.core_path\', NULL, $modx->getOption(\'core_path\') . \'components\\/\' . $packagename . \'\\/\');\\n$modelpath = $packagepath . \'model\\/\';\\n\\nif ($autoPackage) {\\n    $schemapath = $modelpath . \'schema\\/\';\\n    $schemafile = $schemapath . $packagename . \'.mysql.schema.xml\';\\n    $manager = $modx->getManager();\\n    $generator = $manager->getGenerator();\\n    if (!file_exists($schemafile)) {\\n\\n        if (!is_dir($packagepath)) {\\n            mkdir($packagepath, 0777);\\n        }\\n        if (!is_dir($modelpath)) {\\n            mkdir($modelpath, 0777);\\n        }\\n        if (!is_dir($schemapath)) {\\n            mkdir($schemapath, 0777);\\n        }\\n        \\/\\/Use this to create a schema from an existing database\\n        if (!$generator->writeSchema($schemafile, $packagename, \'xPDOObject\', $prefix, true)) {\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Could not generate XML schema\', \'\', \'db2FormIt Hook\');\\n        }\\n    }\\n    $generator->parseSchema($schemafile, $modelpath);\\n    $modx->log(modX::LOG_LEVEL_WARN, \'autoPackage parameter active\', \'\', \'db2FormIt Hook\');\\n    $modx->addPackage($packagename, $modelpath, $prefix);\\n    $classname = $generator->getClassName($tablename);\\n} else {\\n    $modx->addPackage($packagename, $modelpath, $prefix);\\n}\\n\\nif ($fieldname) {\\n    if (is_array($where)) {\\n        $where[$fieldname] = $modx->request->getParameters(array($paramname), \'REQUEST\');\\n    } else {\\n        $where = array($fieldname => $modx->request->getParameters(array($paramname), \'REQUEST\'));\\n    }\\n}\\n\\nif (is_array($where)) {\\n    if ($dataobject = $modx->getObject($classname, $where)) {\\n        if (!is_object($dataobject) || !($dataobject instanceof xPDOObject)) {\\n            $errorMsg = \'Failed to create object of type: \' . $classname;\\n            $hook->addError(\'error_message\', $errorMsg);\\n            $modx->log(modX::LOG_LEVEL_ERROR, $errorMsg, \'\', \'db2FormIt Hook\');\\n            return false;\\n        }\\n        if (empty($dataobject) && $notFoundRedirect) {\\n            $modx->sendRedirect($modx->makeUrl($notFoundRedirect));\\n        }\\n        $formFields = $dataobject->toArray();\\n        foreach ($formFields as $field => $value) {\\n            if (in_array($field, $ignoreFields)) {\\n                unset($formFields[$field]);\\n            }\\n            if (in_array($field, $arrayFields)) {\\n                switch ($arrayFormat) {\\n                    case \'json\': {\\n                        $formFields[$field] = json_decode($value, true);\\n                        break;\\n                    }\\n                    case \'csv\' :\\n                    default : {\\n                    $formFields[$field] = explode(\',\', $value);\\n                    break;\\n                    }\\n                }\\n            }\\n        }\\n        $hook->setValues($formFields);\\n    }\\n} else {\\n    if ($notFoundRedirect) {\\n        $modx->sendRedirect($modx->makeUrl($notFoundRedirect));\\n    }\\n}\\n\\nreturn true;"}',
        'guid' => '5b2fccbde4ba8361eee0b356b4cdfbc0',
        'native_key' => 2,
        'signature' => 'd36282327f868935189d17589737fd5a',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'formit2db',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"formit2db-1.1.2-pl\\/modCategory\\/92c6f34aedea124de4ddbfb426e4467f\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"formit2db"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '4a910935e1a7d4aa9fc36aa76ba46df3',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '92c6f34aedea124de4ddbfb426e4467f',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"FormIt2db"}',
);